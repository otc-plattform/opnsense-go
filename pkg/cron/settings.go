// Code generated by internal/generate/api/main.go; DO NOT EDIT.

package cron

import (
	"context"
	"fmt"
	"github.com/browningluke/opnsense-go/pkg/api"
)

// Data structs

type AddJobRequest struct {
	Origin      string `json:"origin"`
	Enabled     string `json:"enabled"`
	Minutes     string `json:"minutes"`
	Hours       string `json:"hours"`
	Days        string `json:"days"`
	Months      string `json:"months"`
	Weekdays    string `json:"weekdays"`
	Command     string `json:"command"`
	Parameters  string `json:"parameters"`
	Description string `json:"description"`
}

type CommandOption struct {
	Value    string `json:"value"`
	Selected int    `json:"selected"`
}

type GetJob struct {
	Origin      string                   `json:"origin"`
	Enabled     string                   `json:"enabled"`
	Minutes     string                   `json:"minutes"`
	Hours       string                   `json:"hours"`
	Days        string                   `json:"days"`
	Months      string                   `json:"months"`
	Weekdays    string                   `json:"weekdays"`
	Who         string                   `json:"who"`
	Command     map[string]CommandOption `json:"command"`
	Parameters  string                   `json:"parameters"`
	Description string                   `json:"description"`
}

type GetJobResponse struct {
	Job GetJob `json:"job"`
}

type Item struct {
	UUID        string `json:"uuid"`
	Origin      string `json:"origin"`
	Enabled     string `json:"enabled"`
	Minutes     string `json:"minutes"`
	Hours       string `json:"hours"`
	Days        string `json:"days"`
	Months      string `json:"months"`
	Weekdays    string `json:"weekdays"`
	Who         string `json:"who"`
	Command     string `json:"command"`
	Parameters  string `json:"parameters"`
	Description string `json:"description"`
}

type SearchResponse struct {
	Total    int    `json:"total"`
	RowCount int    `json:"rowCount"`
	Current  int    `json:"current"`
	Rows     []Item `json:"rows"`
}

type SetJobRequest struct {
	Origin      string `json:"origin"`
	Enabled     string `json:"enabled"`
	Minutes     string `json:"minutes"`
	Hours       string `json:"hours"`
	Days        string `json:"days"`
	Months      string `json:"months"`
	Weekdays    string `json:"weekdays"`
	Command     string `json:"command"`
	Parameters  string `json:"parameters"`
	Description string `json:"description"`
}

// SettingsAddJob executes the AddJob RPC call of the Settings controller
func (c *Controller) SettingsAddJob(ctx context.Context, job AddJobRequest) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	bodyParams["job"] = job

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/cron/settings/add_job",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("AddJob call failed: %w", err)
	}
	return result, nil
}

// SettingsSetJob executes the SetJob RPC call of the Settings controller
func (c *Controller) SettingsSetJob(ctx context.Context, job SetJobRequest, uuid string) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	bodyParams["job"] = job

	callParams = append(callParams, uuid)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/cron/settings/set_job",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("SetJob call failed: %w", err)
	}
	return result, nil
}

// SettingsSearchJobs executes the SearchJobs RPC call of the Settings controller
func (c *Controller) SettingsSearchJobs(ctx context.Context) (*SearchResponse, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/cron/settings/search_jobs",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &SearchResponse{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("SearchJobs call failed: %w", err)
	}
	return result, nil
}

// SettingsGetJob executes the GetJob RPC call of the Settings controller
func (c *Controller) SettingsGetJob(ctx context.Context, uuid string) (*GetJobResponse, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, uuid)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/cron/settings/get_job",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &GetJobResponse{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("GetJob call failed: %w", err)
	}
	return result, nil
}

// SettingsDeleteJob executes the DeleteJob RPC call of the Settings controller
func (c *Controller) SettingsDeleteJob(ctx context.Context, uuid string) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, uuid)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/cron/settings/del_job",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("DeleteJob call failed: %w", err)
	}
	return result, nil
}
