// Code generated by internal/generate/api/main.go; DO NOT EDIT.

package nginx

import (
	"context"
	"fmt"
	"github.com/browningluke/opnsense-go/pkg/api"
)

// Data structs

type General struct {
	Enabled string `json:"enabled"`
	BanTTL  string `json:"ban_ttl"`
}

type HTTPServer struct {
	ListenHTTPAddress              string `json:"listen_http_address"`
	ListenHTTPSAddress             string `json:"listen_https_address"`
	DefaultServer                  string `json:"default_server"`
	TLSRejectHandshake             string `json:"tls_reject_handshake"`
	SyslogTargets                  string `json:"syslog_targets"`
	ProxyProtocol                  string `json:"proxy_protocol"`
	TrustedProxies                 string `json:"trusted_proxies"`
	TrustedProxiesAlias            string `json:"trusted_proxies_alias"`
	RealIPSource                   string `json:"real_ip_source"`
	ServerName                     string `json:"servername"`
	Locations                      string `json:"locations"`
	Rewrites                       string `json:"rewrites"`
	Root                           string `json:"root"`
	MaxBodySize                    string `json:"max_body_size"`
	BodyBufferSize                 string `json:"body_buffer_size"`
	Certificate                    string `json:"certificate"`
	CA                             string `json:"ca"`
	VerifyClient                   string `json:"verify_client"`
	ZeroRTT                        string `json:"zero_rtt"`
	AccessLogFormat                string `json:"access_log_format"`
	ErrorLogLevel                  string `json:"error_log_level"`
	LogHandshakes                  string `json:"log_handshakes"`
	EnableACMESupport              string `json:"enable_acme_support"`
	Charset                        string `json:"charset"`
	HTTPSOnly                      string `json:"https_only"`
	TLSProtocols                   string `json:"tls_protocols"`
	TLSCiphers                     string `json:"tls_ciphers"`
	TLSECDHCurve                   string `json:"tls_ecdh_curve"`
	TLSPreferServerCiphers         string `json:"tls_prefer_server_ciphers"`
	Resolver                       string `json:"resolver"`
	OCSPStapling                   string `json:"ocsp_stapling"`
	OCSPVerify                     string `json:"ocsp_verify"`
	BlockNonpublicData             string `json:"block_nonpublic_data"`
	DisableGzip                    string `json:"disable_gzip"`
	DisableBotProtection           string `json:"disable_bot_protection"`
	IPACL                          string `json:"ip_acl"`
	AdvancedACLServer              string `json:"advanced_acl_server"`
	Satisfy                        string `json:"satisfy"`
	NaxsiWhitelistSrcIP            string `json:"naxsi_whitelist_srcip"`
	NaxsiExtensiveLog              string `json:"naxsi_extensive_log"`
	Sendfile                       string `json:"sendfile"`
	ClientHeaderBufferSize         string `json:"client_header_buffer_size"`
	LargeClientHeaderBuffersNumber string `json:"large_client_header_buffers_number"`
	LargeClientHeaderBuffersSize   string `json:"large_client_header_buffers_size"`
	SecurityHeader                 string `json:"security_header"`
	LimitRequestConnections        string `json:"limit_request_connections"`
	ErrorPages                     string `json:"errorpages"`
}

type HTTPServerGetResponse struct {
	HTTPServer HTTPServerGetServer `json:"httpserver"`
}

type HTTPServerGetServer struct {
	ServerName                     map[string]Option `json:"servername"`
	SyslogTargets                  []string          `json:"syslog_targets"`
	ListenHTTPAddress              map[string]Option `json:"listen_http_address"`
	ListenHTTPSAddress             map[string]Option `json:"listen_https_address"`
	DefaultServer                  string            `json:"default_server"`
	TLSRejectHandshake             string            `json:"tls_reject_handshake"`
	ProxyProtocol                  string            `json:"proxy_protocol"`
	TrustedProxies                 []string          `json:"trusted_proxies"`
	TrustedProxiesAlias            map[string]Option `json:"trusted_proxies_alias"`
	RealIPSource                   map[string]Option `json:"real_ip_source"`
	Locations                      map[string]Option `json:"locations"`
	Rewrites                       []string          `json:"rewrites"`
	Root                           string            `json:"root"`
	Certificate                    map[string]Option `json:"certificate"`
	CA                             map[string]Option `json:"ca"`
	VerifyClient                   map[string]Option `json:"verify_client"`
	AccessLogFormat                map[string]Option `json:"access_log_format"`
	ErrorLogLevel                  map[string]Option `json:"error_log_level"`
	LogHandshakes                  string            `json:"log_handshakes"`
	EnableACMESupport              string            `json:"enable_acme_support"`
	Charset                        map[string]Option `json:"charset"`
	HTTPSOnly                      string            `json:"https_only"`
	TLSProtocols                   map[string]Option `json:"tls_protocols"`
	TLSCiphers                     string            `json:"tls_ciphers"`
	TLSECDHCurve                   string            `json:"tls_ecdh_curve"`
	TLSPreferServerCiphers         string            `json:"tls_prefer_server_ciphers"`
	Resolver                       map[string]Option `json:"resolver"`
	OCSPStapling                   string            `json:"ocsp_stapling"`
	OCSPVerify                     string            `json:"ocsp_verify"`
	BlockNonpublicData             string            `json:"block_nonpublic_data"`
	DisableBotProtection           string            `json:"disable_bot_protection"`
	DisableGzip                    string            `json:"disable_gzip"`
	NaxsiWhitelistSrcIP            []string          `json:"naxsi_whitelist_srcip"`
	NaxsiExtensiveLog              string            `json:"naxsi_extensive_log"`
	Sendfile                       string            `json:"sendfile"`
	ClientHeaderBufferSize         string            `json:"client_header_buffer_size"`
	LargeClientHeaderBuffersNumber string            `json:"large_client_header_buffers_number"`
	LargeClientHeaderBuffersSize   string            `json:"large_client_header_buffers_size"`
	SecurityHeader                 map[string]Option `json:"security_header"`
	LimitRequestConnections        []string          `json:"limit_request_connections"`
	MaxBodySize                    string            `json:"max_body_size"`
	BodyBufferSize                 string            `json:"body_buffer_size"`
	IPACL                          map[string]Option `json:"ip_acl"`
	AdvancedACLServer              map[string]Option `json:"advanced_acl_server"`
	Satisfy                        map[string]Option `json:"satisfy"`
	ZeroRTT                        string            `json:"zero_rtt"`
	ErrorPages                     []string          `json:"errorpages"`
}

type HTTPServerSearchItem struct {
	UUID               string `json:"uuid"`
	ServerName         string `json:"servername"`
	Locations          string `json:"locations"`
	Root               string `json:"root"`
	HTTPSOnly          string `json:"https_only"`
	Certificate        string `json:"certificate"`
	ListenHTTPAddress  string `json:"listen_http_address"`
	ListenHTTPSAddress string `json:"listen_https_address"`
	DefaultServer      string `json:"default_server"`
}

type HTTPServerSearchResult struct {
	Rows     []HTTPServerSearchItem `json:"rows"`
	RowCount int                    `json:"rowCount"`
	Total    int                    `json:"total"`
	Current  int                    `json:"current"`
}

type Location struct {
	AdvancedACL             string `json:"advanced_acl"`
	AuthBasic               string `json:"authbasic"`
	AuthBasicUserFile       string `json:"authbasicuserfile"`
	AutoIndex               string `json:"autoindex"`
	BodyBufferSize          string `json:"body_buffer_size"`
	CacheBackgroundUpdate   string `json:"cache_background_update"`
	CacheLock               string `json:"cache_lock"`
	CacheMethods            string `json:"cache_methods"`
	CacheMinUses            string `json:"cache_min_uses"`
	CachePath               string `json:"cache_path"`
	CacheRevalidate         string `json:"cache_revalidate"`
	CacheUseStale           string `json:"cache_use_stale"`
	CacheValid              string `json:"cache_valid"`
	CustomPolicy            string `json:"custom_policy"`
	Description             string `json:"description"`
	EnableLearningMode      string `json:"enable_learning_mode"`
	EnableSecRules          string `json:"enable_secrules"`
	ErrorPages              string `json:"errorpages"`
	ForceHTTPS              string `json:"force_https"`
	Honeypot                string `json:"honeypot"`
	Index                   string `json:"index"`
	IPACL                   string `json:"ip_acl"`
	LimitRequestConnections string `json:"limit_request_connections"`
	MatchType               string `json:"matchtype"`
	MaxBodySize             string `json:"max_body_size"`
	PathPrefix              string `json:"path_prefix"`
	PHPEnable               string `json:"php_enable"`
	PHPOverrideScriptName   string `json:"php_override_scriptname"`
	ProxyBufferSize         string `json:"proxy_buffer_size"`
	ProxyBuffering          string `json:"proxy_buffering"`
	ProxyBuffersCount       string `json:"proxy_buffers_count"`
	ProxyBuffersSize        string `json:"proxy_buffers_size"`
	ProxyBusyBuffersSize    string `json:"proxy_busy_buffers_size"`
	ProxyIgnoreClientAbort  string `json:"proxy_ignore_client_abort"`
	ProxyMaxTempFileSize    string `json:"proxy_max_temp_file_size"`
	ProxyReadTimeout        string `json:"proxy_read_timeout"`
	ProxyRequestBuffering   string `json:"proxy_request_buffering"`
	ProxySendTimeout        string `json:"proxy_send_timeout"`
	ProxySSLServerName      string `json:"proxy_ssl_server_name"`
	Rewrites                string `json:"rewrites"`
	Root                    string `json:"root"`
	Satisfy                 string `json:"satisfy"`
	SecRulesErrorPage       string `json:"secrules_errorpage"`
	SQLiBlockScore          string `json:"sqli_block_score"`
	Upstream                string `json:"upstream"`
	UpstreamKeepalive       string `json:"upstream_keepalive"`
	URLPattern              string `json:"urlpattern"`
	WebSocket               string `json:"websocket"`
	XSSBlockScore           string `json:"xss_block_score"`
}

type LocationGetLocation struct {
	Description             string            `json:"description"`
	URLPattern              string            `json:"urlpattern"`
	MatchType               map[string]Option `json:"matchtype"`
	EnableSecRules          string            `json:"enable_secrules"`
	EnableLearningMode      string            `json:"enable_learning_mode"`
	SecRulesErrorPage       map[string]Option `json:"secrules_errorpage"`
	XSSBlockScore           string            `json:"xss_block_score"`
	SQLiBlockScore          string            `json:"sqli_block_score"`
	CustomPolicy            []string          `json:"custom_policy"`
	Upstream                map[string]Option `json:"upstream"`
	PathPrefix              string            `json:"path_prefix"`
	CachePath               map[string]Option `json:"cache_path"`
	CacheUseStale           map[string]Option `json:"cache_use_stale"`
	CacheMethods            map[string]Option `json:"cache_methods"`
	CacheMinUses            string            `json:"cache_min_uses"`
	CacheValid              string            `json:"cache_valid"`
	CacheBackgroundUpdate   string            `json:"cache_background_update"`
	CacheLock               string            `json:"cache_lock"`
	CacheRevalidate         string            `json:"cache_revalidate"`
	Root                    string            `json:"root"`
	Rewrites                []string          `json:"rewrites"`
	Index                   []string          `json:"index"`
	AutoIndex               string            `json:"autoindex"`
	AuthBasic               string            `json:"authbasic"`
	AuthBasicUserFile       map[string]Option `json:"authbasicuserfile"`
	AdvancedACL             string            `json:"advanced_acl"`
	ForceHTTPS              string            `json:"force_https"`
	PHPEnable               string            `json:"php_enable"`
	PHPOverrideScriptName   string            `json:"php_override_scriptname"`
	LimitRequestConnections []string          `json:"limit_request_connections"`
	MaxBodySize             string            `json:"max_body_size"`
	BodyBufferSize          string            `json:"body_buffer_size"`
	Honeypot                string            `json:"honeypot"`
	Websocket               string            `json:"websocket"`
	UpstreamKeepalive       string            `json:"upstream_keepalive"`
	ProxyBufferSize         string            `json:"proxy_buffer_size"`
	ProxyBuffersCount       string            `json:"proxy_buffers_count"`
	ProxyBuffersSize        string            `json:"proxy_buffers_size"`
	ProxyBusyBuffersSize    string            `json:"proxy_busy_buffers_size"`
	ProxyIgnoreClientAbort  string            `json:"proxy_ignore_client_abort"`
	ProxyRequestBuffering   string            `json:"proxy_request_buffering"`
	ProxyBuffering          string            `json:"proxy_buffering"`
	ProxyReadTimeout        string            `json:"proxy_read_timeout"`
	ProxySendTimeout        string            `json:"proxy_send_timeout"`
	IPACL                   map[string]Option `json:"ip_acl"`
	Satisfy                 map[string]Option `json:"satisfy"`
	ProxyMaxTempFileSize    string            `json:"proxy_max_temp_file_size"`
	ProxySSLServerName      string            `json:"proxy_ssl_server_name"`
	ErrorPages              []string          `json:"errorpages"`
}

type LocationGetResponse struct {
	Location LocationGetLocation `json:"location"`
}

type LocationSearchItem struct {
	UUID               string `json:"uuid"`
	Description        string `json:"description"`
	URLPattern         string `json:"urlpattern"`
	PathPrefix         string `json:"path_prefix"`
	MatchType          string `json:"matchtype"`
	Upstream           string `json:"upstream"`
	EnableSecRules     string `json:"enable_secrules"`
	EnableLearningMode string `json:"enable_learning_mode"`
	ForceHTTPS         string `json:"force_https"`
	XSSBlockScore      string `json:"xss_block_score"`
	SQLiBlockScore     string `json:"sqli_block_score"`
	CustomPolicy       string `json:"custom_policy"`
	WAFStatus          string `json:"waf_status"`
}

type LocationSearchResult struct {
	Rows     []LocationSearchItem `json:"rows"`
	RowCount int                  `json:"rowCount"`
	Total    int                  `json:"total"`
	Current  int                  `json:"current"`
}

type Option struct {
	Value    string `json:"value"`
	Selected int    `json:"selected"`
}

type Settings struct {
	General General `json:"general"`
}

type SettingsGetResponse struct {
	NGinx Settings `json:"nginx"`
}

type SettingsSetRequest struct {
	General General `json:"general"`
}

type Upstream struct {
	Description            string `json:"description"`
	ServerEntries          string `json:"serverentries"`
	LoadBalancingAlgorithm string `json:"load_balancing_algorithm"`
	ProxyProtocol          string `json:"proxy_protocol"`
	Keepalive              string `json:"keepalive"`
	KeepaliveRequests      string `json:"keepalive_requests"`
	KeepaliveTimeout       string `json:"keepalive_timeout"`
	HostPort               string `json:"host_port"`
	XForwardedHostVerbatim string `json:"x_forwarded_host_verbatim"`
	TLSEnable              string `json:"tls_enable"`
	TLSClientCertificate   string `json:"tls_client_certificate"`
	TLSNameOverride        string `json:"tls_name_override"`
	TLSProtocolVersions    string `json:"tls_protocol_versions"`
	TLSSessionReuse        string `json:"tls_session_reuse"`
	TLSTrustedCertificate  string `json:"tls_trusted_certificate"`
	TLSVerify              string `json:"tls_verify"`
	TLSVerifyDepth         string `json:"tls_verify_depth"`
	Store                  string `json:"store"`
}

type UpstreamGetItem struct {
	Description            string            `json:"description"`
	ServerEntries          map[string]Option `json:"serverentries"`
	LoadBalancingAlgorithm map[string]Option `json:"load_balancing_algorithm"`
	Keepalive              string            `json:"keepalive"`
	KeepaliveRequests      string            `json:"keepalive_requests"`
	KeepaliveTimeout       string            `json:"keepalive_timeout"`
	HostPort               string            `json:"host_port"`
	XForwardedHostVerbatim string            `json:"x_forwarded_host_verbatim"`
	ProxyProtocol          string            `json:"proxy_protocol"`
	Store                  string            `json:"store"`
	TLSEnable              string            `json:"tls_enable"`
	TLSClientCertificate   map[string]Option `json:"tls_client_certificate"`
	TLSNameOverride        string            `json:"tls_name_override"`
	TLSProtocolVersions    map[string]Option `json:"tls_protocol_versions"`
	TLSSessionReuse        string            `json:"tls_session_reuse"`
	TLSTrustedCertificate  map[string]Option `json:"tls_trusted_certificate"`
	TLSVerify              string            `json:"tls_verify"`
	TLSVerifyDepth         string            `json:"tls_verify_depth"`
}

type UpstreamGetResponse struct {
	Upstream UpstreamGetItem `json:"upstream"`
}

type UpstreamSearchItem struct {
	UUID                   string `json:"uuid"`
	Description            string `json:"description"`
	ServerEntries          string `json:"serverentries"`
	TLSEnable              string `json:"tls_enable"`
	LoadBalancingAlgorithm string `json:"load_balancing_algorithm"`
}

type UpstreamSearchResult struct {
	Rows     []UpstreamSearchItem `json:"rows"`
	RowCount int                  `json:"rowCount"`
	Total    int                  `json:"total"`
	Current  int                  `json:"current"`
}

type UpstreamServer struct {
	Description string `json:"description"`
	Server      string `json:"server"`
	Port        string `json:"port"`
	Priority    string `json:"priority"`
	MaxConns    string `json:"max_conns"`
	MaxFails    string `json:"max_fails"`
	FailTimeout string `json:"fail_timeout"`
	NoUse       string `json:"no_use"`
}

type UpstreamServerGetItem struct {
	Description string            `json:"description"`
	Server      string            `json:"server"`
	Port        string            `json:"port"`
	Priority    string            `json:"priority"`
	MaxConns    string            `json:"max_conns"`
	MaxFails    string            `json:"max_fails"`
	FailTimeout string            `json:"fail_timeout"`
	NoUse       map[string]Option `json:"no_use"`
}

type UpstreamServerGetResponse struct {
	UpstreamServer UpstreamServerGetItem `json:"upstream_server"`
}

type UpstreamServerSearchItem struct {
	UUID        string `json:"uuid"`
	Description string `json:"description"`
	Server      string `json:"server"`
	Port        string `json:"port"`
	Priority    string `json:"priority"`
}

type UpstreamServerSearchResult struct {
	Rows     []UpstreamServerSearchItem `json:"rows"`
	RowCount int                        `json:"rowCount"`
	Total    int                        `json:"total"`
	Current  int                        `json:"current"`
}

// NginxGetSettings executes the GetSettings RPC call of the Nginx controller
func (c *Controller) NginxGetSettings(ctx context.Context) (*SettingsGetResponse, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/get",
		Method:         "GET",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &SettingsGetResponse{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("GetSettings call failed: %w", err)
	}
	return result, nil
}

// NginxSetSettings executes the SetSettings RPC call of the Nginx controller
func (c *Controller) NginxSetSettings(ctx context.Context, nginx SettingsSetRequest) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	bodyParams["nginx"] = nginx

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/set",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("SetSettings call failed: %w", err)
	}
	return result, nil
}

// NginxAddLocation executes the AddLocation RPC call of the Nginx controller
func (c *Controller) NginxAddLocation(ctx context.Context, location Location) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	bodyParams["location"] = location

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/addlocation",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("AddLocation call failed: %w", err)
	}
	return result, nil
}

// NginxSearchLocation executes the SearchLocation RPC call of the Nginx controller
func (c *Controller) NginxSearchLocation(ctx context.Context) (*LocationSearchResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/searchlocation",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &LocationSearchResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("SearchLocation call failed: %w", err)
	}
	return result, nil
}

// NginxGetLocation executes the GetLocation RPC call of the Nginx controller
func (c *Controller) NginxGetLocation(ctx context.Context, uuid string) (*LocationGetResponse, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, uuid)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/getlocation",
		Method:         "GET",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &LocationGetResponse{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("GetLocation call failed: %w", err)
	}
	return result, nil
}

// NginxEditLocation executes the EditLocation RPC call of the Nginx controller
func (c *Controller) NginxEditLocation(ctx context.Context, uuid string, location Location) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, uuid)

	bodyParams["location"] = location

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/setlocation",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("EditLocation call failed: %w", err)
	}
	return result, nil
}

// NginxDeleteLocation executes the DeleteLocation RPC call of the Nginx controller
func (c *Controller) NginxDeleteLocation(ctx context.Context, uuid string) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, uuid)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/dellocation",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("DeleteLocation call failed: %w", err)
	}
	return result, nil
}

// NginxAddHTTPServer executes the AddHTTPServer RPC call of the Nginx controller
func (c *Controller) NginxAddHTTPServer(ctx context.Context, httpserver HTTPServer) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	bodyParams["httpserver"] = httpserver

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/addhttpserver",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("AddHTTPServer call failed: %w", err)
	}
	return result, nil
}

// NginxSearchHTTPServer executes the SearchHTTPServer RPC call of the Nginx controller
func (c *Controller) NginxSearchHTTPServer(ctx context.Context) (*HTTPServerSearchResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/searchhttpserver",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &HTTPServerSearchResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("SearchHTTPServer call failed: %w", err)
	}
	return result, nil
}

// NginxGetHTTPServer executes the GetHTTPServer RPC call of the Nginx controller
func (c *Controller) NginxGetHTTPServer(ctx context.Context, uuid string) (*HTTPServerGetResponse, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, uuid)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/gethttpserver",
		Method:         "GET",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &HTTPServerGetResponse{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("GetHTTPServer call failed: %w", err)
	}
	return result, nil
}

// NginxEditHTTPServer executes the EditHTTPServer RPC call of the Nginx controller
func (c *Controller) NginxEditHTTPServer(ctx context.Context, uuid string, httpserver HTTPServer) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, uuid)

	bodyParams["httpserver"] = httpserver

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/sethttpserver",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("EditHTTPServer call failed: %w", err)
	}
	return result, nil
}

// NginxDeleteHTTPServer executes the DeleteHTTPServer RPC call of the Nginx controller
func (c *Controller) NginxDeleteHTTPServer(ctx context.Context, uuid string) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, uuid)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/delhttpserver",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("DeleteHTTPServer call failed: %w", err)
	}
	return result, nil
}

// NginxAddUpstreamServer executes the AddUpstreamServer RPC call of the Nginx controller
func (c *Controller) NginxAddUpstreamServer(ctx context.Context, upstream_server UpstreamServer) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	bodyParams["upstream_server"] = upstream_server

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/addupstreamserver",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("AddUpstreamServer call failed: %w", err)
	}
	return result, nil
}

// NginxSearchUpstreamServer executes the SearchUpstreamServer RPC call of the Nginx controller
func (c *Controller) NginxSearchUpstreamServer(ctx context.Context) (*UpstreamServerSearchResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/searchupstreamserver",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &UpstreamServerSearchResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("SearchUpstreamServer call failed: %w", err)
	}
	return result, nil
}

// NginxDeleteUpstreamServer executes the DeleteUpstreamServer RPC call of the Nginx controller
func (c *Controller) NginxDeleteUpstreamServer(ctx context.Context, uuid string) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, uuid)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/delupstreamserver",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("DeleteUpstreamServer call failed: %w", err)
	}
	return result, nil
}

// NginxEditUpstreamServer executes the EditUpstreamServer RPC call of the Nginx controller
func (c *Controller) NginxEditUpstreamServer(ctx context.Context, uuid string, upstream_server UpstreamServer) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, uuid)

	bodyParams["upstream_server"] = upstream_server

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/setupstreamserver",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("EditUpstreamServer call failed: %w", err)
	}
	return result, nil
}

// NginxGetUpstreamServer executes the GetUpstreamServer RPC call of the Nginx controller
func (c *Controller) NginxGetUpstreamServer(ctx context.Context, uuid string) (*UpstreamServerGetResponse, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, uuid)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/getupstreamserver",
		Method:         "GET",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &UpstreamServerGetResponse{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("GetUpstreamServer call failed: %w", err)
	}
	return result, nil
}

// NginxAddUpstream executes the AddUpstream RPC call of the Nginx controller
func (c *Controller) NginxAddUpstream(ctx context.Context, upstream Upstream) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	bodyParams["upstream"] = upstream

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/addupstream",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("AddUpstream call failed: %w", err)
	}
	return result, nil
}

// NginxSearchUpstream executes the SearchUpstream RPC call of the Nginx controller
func (c *Controller) NginxSearchUpstream(ctx context.Context) (*UpstreamSearchResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/searchupstream",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &UpstreamSearchResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("SearchUpstream call failed: %w", err)
	}
	return result, nil
}

// NginxDeleteUpstream executes the DeleteUpstream RPC call of the Nginx controller
func (c *Controller) NginxDeleteUpstream(ctx context.Context, uuid string) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, uuid)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/delupstream",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("DeleteUpstream call failed: %w", err)
	}
	return result, nil
}

// NginxEditUpstream executes the EditUpstream RPC call of the Nginx controller
func (c *Controller) NginxEditUpstream(ctx context.Context, uuid string, upstream Upstream) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, uuid)

	bodyParams["upstream"] = upstream

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/setupstream",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("EditUpstream call failed: %w", err)
	}
	return result, nil
}

// NginxGetUpstream executes the GetUpstream RPC call of the Nginx controller
func (c *Controller) NginxGetUpstream(ctx context.Context, uuid string) (*UpstreamGetResponse, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, uuid)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/nginx/settings/getupstream",
		Method:         "GET",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &UpstreamGetResponse{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("GetUpstream call failed: %w", err)
	}
	return result, nil
}
