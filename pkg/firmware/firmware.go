// Code generated by internal/generate/api/main.go; DO NOT EDIT.

package firmware

import (
	"context"
	"fmt"
	"github.com/browningluke/opnsense-go/pkg/api"
)

// Data structs

type FirmwareChangelogItem struct {
	Series  string `json:"series"`
	Version string `json:"version"`
	Date    string `json:"date"`
}

type FirmwareInfoResponse struct {
	ProductID      string                  `json:"product_id"`
	ProductVersion string                  `json:"product_version"`
	Package        []FirmwarePackage       `json:"package"`
	Changelog      []FirmwareChangelogItem `json:"changelog"`
	Product        FirmwareProductInfo     `json:"product"`
}

type FirmwarePackage struct {
	Name       string `json:"name"`
	Version    string `json:"version"`
	Comment    string `json:"comment"`
	Flatsize   string `json:"flatsize"`
	Locked     string `json:"locked"`
	Automatic  string `json:"automatic"`
	License    string `json:"license"`
	Repository string `json:"repository"`
	Origin     string `json:"origin"`
	Provided   string `json:"provided"`
	Installed  string `json:"installed"`
	Path       string `json:"path"`
	Configured string `json:"configured"`
	Tier       string `json:"tier"`
}

type FirmwareProductInfo struct {
	ProductABI            string   `json:"product_abi"`
	ProductArch           string   `json:"product_arch"`
	ProductCheck          string   `json:"product_check"`
	ProductConflicts      string   `json:"product_conflicts"`
	ProductCopyrightOwner string   `json:"product_copyright_owner"`
	ProductCopyrightURL   string   `json:"product_copyright_url"`
	ProductCopyrightYears string   `json:"product_copyright_years"`
	ProductEmail          string   `json:"product_email"`
	ProductHash           string   `json:"product_hash"`
	ProductID             string   `json:"product_id"`
	ProductLatest         string   `json:"product_latest"`
	ProductLicense        []string `json:"product_license"`
	ProductLog            int      `json:"product_log"`
	ProductMirror         string   `json:"product_mirror"`
	ProductName           string   `json:"product_name"`
	ProductNickname       string   `json:"product_nickname"`
	ProductRepos          string   `json:"product_repos"`
	ProductSeries         string   `json:"product_series"`
	ProductTier           string   `json:"product_tier"`
	ProductTime           string   `json:"product_time"`
	ProductVersion        string   `json:"product_version"`
	ProductWebsite        string   `json:"product_website"`
}

// FirmwareInfo executes the Info RPC call of the Firmware controller
func (c *Controller) FirmwareInfo(ctx context.Context) (*FirmwareInfoResponse, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/core/firmware/info",
		Method:         "GET",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &FirmwareInfoResponse{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("Info call failed: %w", err)
	}
	return result, nil
}

// FirmwareInstall executes the Install RPC call of the Firmware controller
func (c *Controller) FirmwareInstall(ctx context.Context, pkg string) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, pkg)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/core/firmware/install",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("Install call failed: %w", err)
	}
	return result, nil
}

// FirmwareRemove executes the Remove RPC call of the Firmware controller
func (c *Controller) FirmwareRemove(ctx context.Context, pkg string) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, pkg)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/core/firmware/remove",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("Remove call failed: %w", err)
	}
	return result, nil
}
