// Code generated by internal/generate/api/main.go; DO NOT EDIT.

package kea

import (
	"context"
	"github.com/browningluke/opnsense-go/pkg/api"
)

var KeaPeersOpts = api.ReqOpts{
	AddEndpoint:         "/kea/dhcpv4/add_peer",
	GetEndpoint:         "/kea/dhcpv4/get_peer",
	UpdateEndpoint:      "/kea/dhcpv4/set_peer",
	DeleteEndpoint:      "/kea/dhcpv4/del_peer",
	SearchEndpoint:      "/kea/dhcpv4/search_peer",
	ReconfigureEndpoint: keaReconfigureEndpoint,
	Monad:               "peer",
}

// Data structs

type KeaPeers struct {
	Name string              `json:"name"`
	Url  string              `json:"url"`
	Role api.SelectedMapList `json:"role"`
}

// CRUD operations

func (c *Controller) AddKeaPeers(ctx context.Context, resource *KeaPeers) (string, error) {
	return api.Add(c.Client(), ctx, KeaPeersOpts, resource)
}

func (c *Controller) GetKeaPeers(ctx context.Context, id string) (*KeaPeers, error) {
	return api.Get(c.Client(), ctx, KeaPeersOpts, &KeaPeers{}, id)
}

func (c *Controller) UpdateKeaPeers(ctx context.Context, id string, resource *KeaPeers) error {
	return api.Update(c.Client(), ctx, KeaPeersOpts, resource, id)
}

func (c *Controller) DeleteKeaPeers(ctx context.Context, id string) error {
	return api.Delete(c.Client(), ctx, KeaPeersOpts, id)
}

func (c *Controller) SearchKeaPeers(ctx context.Context, filter string) ([]KeaPeers, error) {
	return api.Search(c.Client(), ctx, KeaPeersOpts, []KeaPeers{}, filter)
}
