// Code generated by internal/generate/api/main.go; DO NOT EDIT.

package kea

import (
	"context"
	"github.com/browningluke/opnsense-go/pkg/api"
)

var KeaConfigOpts = api.ReqOpts{
	AddEndpoint:         "",
	GetEndpoint:         "/kea/dhcpv4/get",
	UpdateEndpoint:      "/kea/dhcpv4/set",
	DeleteEndpoint:      "",
	SearchEndpoint:      "",
	ReconfigureEndpoint: keaReconfigureEndpoint,
	Monad:               "dhcpv4",
}

// Data structs

type GeneralSettings struct {
	Enabled       string              `json:"enabled"`
	Interfaces    api.SelectedMapList `json:"interfaces"`
	ValidLifetime string              `json:"valid_lifetime"`
	Fwrules       string              `json:"fwrules"`
}

type HaSettings struct {
	Enabled        string `json:"enabled"`
	ThisServerName string `json:"this_server_name"`
}

type KeaConfig struct {
	General GeneralSettings `json:"general"`
	Ha      HaSettings      `json:"ha"`
}

// CRUD operations

func (c *Controller) AddKeaConfig(ctx context.Context, resource *KeaConfig) (string, error) {
	return api.Add(c.Client(), ctx, KeaConfigOpts, resource)
}

func (c *Controller) GetKeaConfig(ctx context.Context, id string) (*KeaConfig, error) {
	return api.Get(c.Client(), ctx, KeaConfigOpts, &KeaConfig{}, id)
}

func (c *Controller) UpdateKeaConfig(ctx context.Context, id string, resource *KeaConfig) error {
	return api.Update(c.Client(), ctx, KeaConfigOpts, resource, id)
}

func (c *Controller) DeleteKeaConfig(ctx context.Context, id string) error {
	return api.Delete(c.Client(), ctx, KeaConfigOpts, id)
}
