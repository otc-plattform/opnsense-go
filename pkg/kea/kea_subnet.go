// Code generated by internal/generate/api/main.go; DO NOT EDIT.

package kea

import (
	"context"
	"github.com/browningluke/opnsense-go/pkg/api"
)

var KeaSubnetOpts = api.ReqOpts{
	AddEndpoint:         "/kea/dhcpv4/add_subnet",
	GetEndpoint:         "/kea/dhcpv4/get_subnet",
	UpdateEndpoint:      "/kea/dhcpv4/set_subnet",
	DeleteEndpoint:      "/kea/dhcpv4/del_subnet",
	SearchEndpoint:      "/kea/dhcpv4/search_subnet",
	ReconfigureEndpoint: keaReconfigureEndpoint,
	Monad:               "subnet4",
}

// Data structs

type OptionData struct {
	DomainNameServers api.SelectedMapList `json:"domain_name_servers"`
	DomainSearch      api.SelectedMapList `json:"domain_search"`
	Routers           api.SelectedMapList `json:"routers"`
	StaticRoutes      string              `json:"static_routes"`
	DomainName        string              `json:"domain_name"`
	NtpServers        api.SelectedMapList `json:"ntp_servers"`
	TimeServers       api.SelectedMapList `json:"time_servers"`
	TftpServerName    string              `json:"tftp_server_name"`
	BootFileName      string              `json:"boot_file_name"`
}

type KeaSubnet struct {
	Subnet     string     `json:"subnet"`
	Pools      string     `json:"pools"`
	OptionData OptionData `json:"option_data"`
}

// CRUD operations

func (c *Controller) AddKeaSubnet(ctx context.Context, resource *KeaSubnet) (string, error) {
	return api.Add(c.Client(), ctx, KeaSubnetOpts, resource)
}

func (c *Controller) GetKeaSubnet(ctx context.Context, id string) (*KeaSubnet, error) {
	return api.Get(c.Client(), ctx, KeaSubnetOpts, &KeaSubnet{}, id)
}

func (c *Controller) UpdateKeaSubnet(ctx context.Context, id string, resource *KeaSubnet) error {
	return api.Update(c.Client(), ctx, KeaSubnetOpts, resource, id)
}

func (c *Controller) DeleteKeaSubnet(ctx context.Context, id string) error {
	return api.Delete(c.Client(), ctx, KeaSubnetOpts, id)
}

func (c *Controller) SearchKeaSubnet(ctx context.Context, filter string) ([]KeaSubnet, error) {
	return api.Search(c.Client(), ctx, KeaSubnetOpts, []KeaSubnet{}, filter)
}
