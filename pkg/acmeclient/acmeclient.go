// Code generated by internal/generate/api/main.go; DO NOT EDIT.

package acmeclient

import (
	"context"
	"fmt"
	"github.com/browningluke/opnsense-go/pkg/api"
)

// Data structs

type Account struct {
	UUID        string `json:"string"`
	Enabled     string `json:"enabled"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Email       string `json:"email"`
	CA          string `json:"ca"`
	CustomCA    string `json:"custom_ca"`
	EABKID      string `json:"eab_kid"`
	EABHMAC     string `json:"eab_hmac"`
}

type AccountCreateRequest struct {
	Enabled     string `json:"enabled"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Email       string `json:"email"`
	CA          string `json:"ca"`
	CustomCA    string `json:"custom_ca"`
	EABKID      string `json:"eab_kid"`
	EABHMAC     string `json:"eab_hmac"`
}

type AccountEditRequest struct {
	Enabled     string `json:"enabled"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Email       string `json:"email"`
	CA          string `json:"ca"`
	CustomCA    string `json:"custom_ca"`
	EABKID      string `json:"eab_kid"`
	EABHMAC     string `json:"eab_hmac"`
}

type AccountGet struct {
	ID               string            `json:"id"`
	Enabled          string            `json:"enabled"`
	Name             string            `json:"name"`
	Description      string            `json:"description"`
	Email            string            `json:"email"`
	CA               map[string]Option `json:"ca"`
	CustomCA         string            `json:"custom_ca"`
	EABKID           string            `json:"eab_kid"`
	EABHMAC          string            `json:"eab_hmac"`
	Key              string            `json:"key"`
	StatusCode       string            `json:"statusCode"`
	StatusLastUpdate string            `json:"statusLastUpdate"`
}

type GetAccountResponse struct {
	Account AccountGet `json:"account"`
}

type Option struct {
	Value    string `json:"value"`
	Selected int    `json:"selected"`
}

type SearchAccountResponse struct {
	Total    int       `json:"total"`
	RowCount int       `json:"rowCount"`
	Current  int       `json:"current"`
	Rows     []Account `json:"rows"`
}

// ACMEClientAddAccount executes the AddAccount RPC call of the ACMEClient controller
func (c *Controller) ACMEClientAddAccount(ctx context.Context, account AccountCreateRequest) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	bodyParams["account"] = account

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/acmeclient/accounts/add",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("AddAccount call failed: %w", err)
	}
	return result, nil
}

// ACMEClientEditAccount executes the EditAccount RPC call of the ACMEClient controller
func (c *Controller) ACMEClientEditAccount(ctx context.Context, uuid string, account AccountEditRequest) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, uuid)

	bodyParams["account"] = account

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/acmeclient/accounts/update",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("EditAccount call failed: %w", err)
	}
	return result, nil
}

// ACMEClientSearchAccount executes the SearchAccount RPC call of the ACMEClient controller
func (c *Controller) ACMEClientSearchAccount(ctx context.Context) (*SearchAccountResponse, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/acmeclient/accounts/search",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &SearchAccountResponse{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("SearchAccount call failed: %w", err)
	}
	return result, nil
}

// ACMEClientGetAccount executes the GetAccount RPC call of the ACMEClient controller
func (c *Controller) ACMEClientGetAccount(ctx context.Context, uuid string) (*GetAccountResponse, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, uuid)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/acmeclient/accounts/get",
		Method:         "GET",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &GetAccountResponse{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("GetAccount call failed: %w", err)
	}
	return result, nil
}

// ACMEClientDeleteAccount executes the DeleteAccount RPC call of the ACMEClient controller
func (c *Controller) ACMEClientDeleteAccount(ctx context.Context, uuid string) (*api.ActionResult, error) {

	callParams := []string{}
	bodyParams := make(map[string]interface{})

	callParams = append(callParams, uuid)

	callOpts := api.RPCOpts{
		BaseEndpoint:   "/acmeclient/accounts/del",
		Method:         "POST",
		PathParameters: callParams,
		BodyParameters: bodyParams,
	}

	resultData := &api.ActionResult{}
	result, err := api.Call(c.Client(), ctx, callOpts, resultData)
	if err != nil {
		return nil, fmt.Errorf("DeleteAccount call failed: %w", err)
	}
	return result, nil
}
